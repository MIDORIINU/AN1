Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('ylim', 'C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\graph3d\ylim.m', 31)" style="font-weight:bold">ylim</a> (<a href="matlab: opentoline('C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\graph3d\ylim.m',31,0)">line 31</a>)
Too many output arguments.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('grafico', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\grafico.m', 72)" style="font-weight:bold">grafico</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\grafico.m',72,0)">line 72</a>)
    'XTick',a:(b-a)/20:b,'YTick',ylim(0):(ylim(1)-ylim(0))/20:ylim(1),...

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 258)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',258,0)">line 258</a>)
graphic_x_handle = grafico(xcn_2, ai, bi, cant_points, titlex, ...
} 
ylim

ans =

         0    4.5000

ylim(1)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('ylim', 'C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\graph3d\ylim.m', 31)" style="font-weight:bold">ylim</a> (<a href="matlab: opentoline('C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\graph3d\ylim.m',31,0)">line 31</a>)
Limits must be a 2-element vector of increasing numeric values.
} 
a=ylim

a =

         0    4.5000

a(1)

ans =

     0

a(2)

ans =

    4.5000

a(2)

ans =

    4.5000

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración. 
Por tratarse de una función linealel valor se halla trivialmente:tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función linealel valor se halla trivialmente:


t_acel_30_percent =

    0.8574

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo
Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función linealel valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t=0.857370.

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función linealel valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t=0.857370.

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallamos la raíz por Newton-Raphson:

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_30_percent)

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_30_percent)

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

{Unrecognized function or variable 'legend1'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('grafico', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\grafico.m', 76)" style="font-weight:bold">grafico</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\grafico.m',76,0)">line 76</a>)
set(legend1,...

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 258)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',258,0)">line 258</a>)
graphic_x_handle = grafico(xcn_2, ai, bi, cant_points, titlex, ...
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

Unrecognized function or variable 'ii'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 343)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',343,0)">line 343</a>)
        'para f y para la tolerancia %.1e...'}), tols(:, ii)); 

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

Ejecutando el método de Newton-Raphson para f y para la tolerancia 1.0e-08...{Unrecognized function or variable 'seed'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 348)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',348,0)">line 348</a>)
        method_newton(f, seed, 1E-8, max_iter);
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

Ejecutando el método de Newton-Raphson para f y para la tolerancia 1.0e-08...Listo

{Unrecognized function or variable 'cant_signif'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 369)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',369,0)">line 369</a>)
        cant_signif);
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.857370.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

Ejecutando el método de Newton-Raphson para f y para la tolerancia 1.0e-08...Listo

Raíz hallada después de 4 iteraciones: 0.85737032 +- 1.0e-08

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.85737032.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

Ejecutando el método de Newton-Raphson para f y para la tolerancia 1.0e-08...Listo

Raíz hallada después de 4 iteraciones: 0.85737032 +- 1.0e-08

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_cn_2_30_percent=0.85737032.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)xcn_2(t)-xcn_2(t_acel_cn_2_30_percent)

Ejecutando el método de Newton-Raphson para f y para la tolerancia 1.0e-08...Listo

Raíz hallada después de 4 iteraciones: 0.85737032 +- 1.0e-08

zeros(3)

ans =

     0     0     0
     0     0     0
     0     0     0

zeros(1, 3)

ans =

     0     0     0

tp1
if system_dependent('IsDebugMode')==1, dbstep; end
Inicializando las variables globales para el TP1...if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
{Conversion to double from function_handle is not possible.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 88)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',88,0)">line 88</a>)
x(1) = @(t) -0.5443*t.^3 + 2.*t.^2;
} 
tp1
if system_dependent('IsDebugMode')==1, dbstep; end
Inicializando las variables globales para el TP1...if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Creando el directorio para las imágenes...if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Creando el directorio para los resultados numéricos...if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end

Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

if system_dependent('IsDebugMode')==1, dbstep; end
    @(t)-0.5443*t.^3+2.*t.^2

if system_dependent('IsDebugMode')==1, dbstep; end

if system_dependent('IsDebugMode')==1, dbstep; end
    @(t)-1.6329*t.^2+4*t

if system_dependent('IsDebugMode')==1, dbstep; end

if system_dependent('IsDebugMode')==1, dbstep; end
    @(t)-3.2658*t+4

if system_dependent('IsDebugMode')==1, dbstep; end
Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Salvando el gráfico de la función xcn_2 en un archivo "PNG"......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',270,1)">270 </a>fprintf('Listo\n\n');
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Salvando el gráfico de la función vcn_2 en un archivo "PNG"......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',283,1)">283 </a>fprintf('Listo\n\n');
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Salvando el gráfico de la función acn_2 en un archivo "PNG"......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',296,1)">296 </a>fprintf('Listo\n\n');
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
Listo


if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
A media carga el 30% de la aceleración se alcanza en t_acel_30_percent=0.85737032.

if system_dependent('IsDebugMode')==1, dbstep; end
Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f) a la cuál le hallaremos la raíz por Newton-Raphson:

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
    @(t)pos(t)-pos(t_acel_30_percent)

if system_dependent('IsDebugMode')==1, dbquit; end
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

A media carga el 30% de la aceleración se alcanza en t_acel_30_percent=0.85737032.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{1}(t)-x{1}(t_acel_30_percent)

Ejecutando el método de Newton-Raphson para f{1} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',323,1)">323 </a>fprintf(strjoin({'A media carga el 30%% de la aceleración',...
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
A media carga el 30% de la aceleración se alcanza en t_acel_30_percent=8.6e-01+01f.

if system_dependent('IsDebugMode')==1, dbquit; end
num2str(8.0,0)

ans =

    '8'

num2str(ceil(7.9),0)

ans =

    '8'

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',323,1)">323 </a>fprintf(strjoin({'El 30%% de la aceleración',...
if system_dependent('IsDebugMode')==1, dbcont; end
El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{1}(t)-x{1}(t_acel_30_percent)

Ejecutando el método de Newton-Raphson para f{1} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

tol=1E-8

tol =

   1.0000e-08

cant_signif = ceil(-log10(tol));
cant_signif = ceil(-log10(tol))

cant_signif =

     8

tol=1E-10

tol =

   1.0000e-10

cant_signif = ceil(-log10(tol))

cant_signif =

    10

strjoin({'Hallamos el valor de tiempo en', ...
    ' el cual se alcanza el 30%% de la aceleración positiva. \n', ...
    'Por tratarse de una función lineal', ...
    ' el valor se halla trivialmente:\n\n'},'')

ans =

    'Hallamos el valor de tiempo en el cual se alcanza el 30%% de la aceleración positiva. \nPor tratarse de una función lineal el valor se halla trivialmente:\n\n'

strjoin({'El 30%% de la aceleración',...
    ' se alcanza en t_acel_30_percent=%.', ...
    num2str(cant_signif) ,'f.\n\n'}, '')

ans =

    'El 30%% de la aceleración se alcanza en t_acel_30_percent=%.10f.\n\n'

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{1}(t)-x{1}(t_acel_30_percent)

Ejecutando el método de Newton-Raphson para f{1} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

close all
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 0] para ver su forma general...

Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Generando un gráfico de cada función en el intervalo [3, 1.732100e+00] para ver su forma general...

{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('linspace', 'C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\elmat\linspace.m', 22)" style="font-weight:bold">linspace</a> (<a href="matlab: opentoline('C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\elmat\linspace.m',22,0)">line 22</a>)
Inputs must be scalars.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('grafico', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\grafico.m', 34)" style="font-weight:bold">grafico</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\grafico.m',34,0)">line 34</a>)
x = linspace(a, b, cantpuntos);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 259)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',259,0)">line 259</a>)
graphic_x_handle = grafico(x{1}, ai, bi, cant_points, titlex, ...
} 
matlab.internal.language.introspective.errorDocCallback('linspace', 'C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\elmat\linspace.m', 22)
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 0] para ver su forma general...

Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Generando un gráfico de cada función en el intervalo [3, 1.732100e+00] para ver su forma general...

Salvando el gráfico de la función xcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función vcn_2 en un archivo "PNG"......Listo

Salvando el gráfico de la función acn_2 en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{1}(t)-x{1}(t_acel_30_percent)

Ejecutando el método de Newton-Raphson para f{1} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0, 2.449500e+00] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{1}(t)-x{1}(t_acel_30_percent)

Ejecutando el método de Newton-Raphson para f{1} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{1}(t)-x{1}(t_acel_30_percent)

Ejecutando el método de Newton-Raphson para f{1} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

close all
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo


<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',318,1)">318 </a>fprintf('\n\n\nEjecutando los métodos numéricos...\n\n\n');
if system_dependent('IsDebugMode')==1, dbstep; end



Ejecutando los métodos numéricos...


if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
    @(t)x{ii}(t)-x{ii}(t_acel_30_percent)

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

if system_dependent('IsDebugMode')==1, dbstep; end
Salvando los resultados en un archivo "CSV"......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
Estimando el orden de convergencia......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('sym/subsindex', 'C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\symbolic\symbolic\@sym\sym.m', 855)" style="font-weight:bold">sym/subsindex</a> (<a href="matlab: opentoline('C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\symbolic\symbolic\@sym\sym.m',855,0)">line 855</a>)
Invalid indexing or function definition. Indexing must follow MATLAB indexing. Function arguments must be symbolic variables, and function body must be sym expression.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('estimate_order', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\estimate_order.m', 52)" style="font-weight:bold">estimate_order</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\estimate_order.m',52,0)">line 52</a>)
func = f(x);                     % Defino func como la función puntero a f.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 427)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',427,0)">line 427</a>)
        estimate_order(f, table(iter_req -3, 2), ...
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo


<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',318,1)">318 </a>fprintf('\n\n\nEjecutando los métodos numéricos...\n\n\n');
if system_dependent('IsDebugMode')==1, dbcont; end



Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent)

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
El orden de convergencia estimado para el método de Newton-Raphson es 1.99899123.

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......if system_dependent('IsDebugMode')==1, dbstep; end
{Unrecognized function or variable 'newton_convergence_complete_name'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 448)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',448,0)">line 448</a>)
    dlmwrite(newton_convergence_complete_name, ...
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo


<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',308,1)">308 </a>newton_results_complete_name = ...
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbcont; end



Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent)

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
El orden de convergencia estimado para el método de Newton-Raphson es 1.99899123.

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

if system_dependent('IsDebugMode')==1, dbquit; end
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

El 30% de la aceleración se alcanza en t_acel_30_percent=0.0000000000.

El 30% de la aceleración se alcanza en t_acel_30_percent=0.0000000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',434,1)">434 </a>    [order, asintconst, ~, asintconstder, interm1, interm2, ...
if system_dependent('IsDebugMode')==1, dbcont; end
Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99899123.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

El 30% de la aceleración se alcanza en t_acel_30_percent=0.0000000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00004941.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99896263.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',329,1)">329 </a>t_acel_30_percent = zeros(1, 3);
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

El 30% de la aceleración se alcanza en t_acel_30_percent=0.0000000000.

El 30% de la aceleración se alcanza en t_acel_30_percent=0.0000000000.

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

if system_dependent('IsDebugMode')==1, dbquit; end
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99899123.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00004941.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99896263.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99899123.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00004941.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99896263.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99899123.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00004941.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99896263.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',369,1)">369 </a>    [a, ~, ~] = bisection(f{ii}, ai(ii), bi(ii), 2);
if system_dependent('IsDebugMode')==1, dbstep in; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbquit; end
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',369,1)">369 </a>    [a, ~, ~] = bisection(f{ii}, ai(ii), bi(ii), 2);
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbcont; end
Raíz hallada después de 5 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es Inf.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

{Brace indexing is not supported for variables of this type.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 340)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',340,0)">line 340</a>)
    max_acel = a{ii}(0);
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es Inf.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00013040.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es Inf.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.26142069.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00017424.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es Inf.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',369,1)">369 </a>    [~, seed, ~] = simple_bisection(f{ii}, ai(ii), bi(ii), 1);
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Listo

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Raíz hallada después de 5 iteraciones: 0.8573703227 +- 1.0e-10

if system_dependent('IsDebugMode')==1, dbstep; end
Salvando los resultados en un archivo "CSV"......if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbquit; end
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',374,1)">374 </a>    [~, seed, ~] = simple_bisection(f{ii}, ai(ii), bi(ii), 1);
if system_dependent('IsDebugMode')==1, dbcont; end
Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.26142069.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

if system_dependent('IsDebugMode')==1, dbcont; end
Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00017424.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbcont; end
Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 5 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es Inf.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',378,1)">378 </a>    fprintf(strjoin({'Ejecutando el método de Newton-Raphson'...
if system_dependent('IsDebugMode')==1, dbcont; end
Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

if system_dependent('IsDebugMode')==1, dbcont; end
Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',374,1)">374 </a>    [~, seed, ~] = method_bisection(f{ii}, ai(ii), bi(ii), 0.1);
if system_dependent('IsDebugMode')==1, dbstep in; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
{Not enough input arguments.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('method_bisection', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m', 45)" style="font-weight:bold">method_bisection</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',45,0)">line 45</a>)
for ii = 1:max_iter

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 374)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',374,0)">line 374</a>)
    [~, seed, ~] = method_bisection(f{ii}, ai(ii), bi(ii), 0.1);
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',374,1)">374 </a>    [~, seed, ~] = method_bisection(f{ii}, ai(ii), bi(ii), 0.1);
if system_dependent('IsDebugMode')==1, dbstep in; end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',22,1)">22  </a>    max_iter = 1000;   % Valor por omisión.
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',23,1)">23  </a>end %if
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',25,1)">25  </a>delta = abs(delta);    % Aseguro que el error sea positivo.
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',28,1)">28  </a>if ((a0 > b0) || (f(a0)*f(b0) > 0))
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',39,1)">39  </a>end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',41,1)">41  </a>a = a0;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',42,1)">42  </a>b = b0;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',45,1)">45  </a>for ii = 1:max_iter
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',47,1)">47  </a>    delta_iter = b -a;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',49,1)">49  </a>    if (delta_iter < delta)      % Comparo el error con el deseado.
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',51,1)">51  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',53,1)">53  </a>    center = (b + a)/2;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',55,1)">55  </a>    if (f(center)*f(a) > 0)
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',57,1)">57  </a>    else
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',58,1)">58  </a>        b = center;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',59,1)">59  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',61,1)">61  </a>end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',47,1)">47  </a>    delta_iter = b -a;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',49,1)">49  </a>    if (delta_iter < delta)      % Comparo el error con el deseado.
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',51,1)">51  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',53,1)">53  </a>    center = (b + a)/2;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',55,1)">55  </a>    if (f(center)*f(a) > 0)
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',56,1)">56  </a>        a = center;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',59,1)">59  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',61,1)">61  </a>end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',47,1)">47  </a>    delta_iter = b -a;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',49,1)">49  </a>    if (delta_iter < delta)      % Comparo el error con el deseado.
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',51,1)">51  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',53,1)">53  </a>    center = (b + a)/2;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',55,1)">55  </a>    if (f(center)*f(a) > 0)
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',57,1)">57  </a>    else
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',58,1)">58  </a>        b = center;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',59,1)">59  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',61,1)">61  </a>end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',47,1)">47  </a>    delta_iter = b -a;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',49,1)">49  </a>    if (delta_iter < delta)      % Comparo el error con el deseado.
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',51,1)">51  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',53,1)">53  </a>    center = (b + a)/2;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',55,1)">55  </a>    if (f(center)*f(a) > 0)
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',56,1)">56  </a>        a = center;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',59,1)">59  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',61,1)">61  </a>end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',47,1)">47  </a>    delta_iter = b -a;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',49,1)">49  </a>    if (delta_iter < delta)      % Comparo el error con el deseado.
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',51,1)">51  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',53,1)">53  </a>    center = (b + a)/2;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',55,1)">55  </a>    if (f(center)*f(a) > 0)
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',56,1)">56  </a>        a = center;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',59,1)">59  </a>    end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',61,1)">61  </a>end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',47,1)">47  </a>    delta_iter = b -a;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',49,1)">49  </a>    if (delta_iter < delta)      % Comparo el error con el deseado.
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',50,1)">50  </a>        break;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\method_bisection.m',64,1)">64  </a>success = 1;           % Indico éxito.
if system_dependent('IsDebugMode')==1, dbquit all; end
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz\punto fijo es: 0.91856

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz\punto fijo es: 1.12500

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz\punto fijo es: 0.64954

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...{Unable to use curly braces to index into cell.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 87)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',87,0)">line 87</a>)
fn = cell{1, 3};% Nonmbres de las funciones.
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


********
Calculando para Media carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

********
Calculando para Máxima carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

********
Calculando para Mínima carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('append', 'C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\strfun\append.m', 46)" style="font-weight:bold">append</a> (<a href="matlab: opentoline('C:\Program Files\HDD\Progs\x86_64\MATLAB\R2019b\toolbox\matlab\strfun\append.m',46,0)">line 46</a>)
Not enough input arguments.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('tp1', 'E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m', 411)" style="font-weight:bold">tp1</a> (<a href="matlab: opentoline('E:\WDATA\Facultad\Materias\Análisis Numérico I\TPS\REPO\TPS\TP1\code\tp1.m',411,0)">line 411</a>)
        seeds_table, 'precision','%.15f'', '-append');
} 
tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

tp1
Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga:

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga (6 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga (12 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga (o personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga (6 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga (12 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga (0 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga (6 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga (12 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga (0 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga (6 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga (12 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga (0 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para v{4}:

Para el caso del freno del ascensor usamos Newton-Raphson para calcular el tiempo en el. 
 que se alcanza velocidad 0, la función utilizada es:

    @(t)3.0625*t.^2-7.84

Ejecutando el método de bisección para v{4}, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.62500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para v{4} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 8 iteraciones: -0.4871000078 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00022042.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga (6 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga (12 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga (0 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para v{4}:

Para el caso del freno del ascensor usamos Newton-Raphson para calcular el tiempo en el que se alcanza velocidad 0, la función utilizada es:

    @(t)3.0625*t.^2-7.84

Ejecutando el método de bisección para v{4}, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.62500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para v{4} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.6000000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.82800827.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga (6 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 1 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga (12 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 2 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga (0 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para f{ 3 } y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para v{4}:

Para el caso del freno del ascensor usamos Newton-Raphson para calcular el tiempo en el que se alcanza velocidad 0, la función utilizada es:

    @(t)3.0625*t.^2-7.84

Ejecutando el método de bisección para v{4}, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.75000

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para v{4} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.6000000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99999853.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga (6 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphsonpara f{1} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga (12 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphsonpara f{2} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga (0 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent=0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphsonpara f{3} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para v{4}:

Para el caso del freno del ascensor usamos Newton-Raphson para calcular el tiempo en el que se alcanza velocidad 0, la función utilizada es:

    @(t)3.0625*t.^2-7.84

Ejecutando el método de bisecciónpara v{4}, como arranque, para la tolerancia 3.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.75000

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para v{4} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.6000000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99999853.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

Inicializando las variables globales para el TP1...Listo

Trabajando en: MATLAB 9.7.0.1190202 (R2019b) sobre Windows.

Creando el directorio para las imágenes...Listo

Creando el directorio para los resultados numéricos...Listo


Las funciones para la posición, velocidad y aceleración a media carga (n/2 = 6), son respectivamente:

    @(t)-0.5443*t.^3+2.*t.^2


    @(t)-1.6329*t.^2+4*t


    @(t)-3.2658*t+4

Las unidades para estas funciones son m, m/s y m/s^2, respectivamente.


Generando un gráfico de cada función en el intervalo [0.00000, 2.44950] para ver su forma general...

Salvando el gráfico de la posición en un archivo "PNG"......Listo

Salvando el gráfico de la velocidad en un archivo "PNG"......Listo

Salvando el gráfico de la aceleración en un archivo "PNG"......Listo

Listo





Ejecutando los métodos numéricos...


****************************
Calculando para Media carga (6 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent = 0.8573703227.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{1}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 1 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.91856

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphsonpara f{1} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.8573703227 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99990052.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Máxima carga (12 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent = 1.0500000000.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{2}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 2 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.12500

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphsonpara f{2} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.0500000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 2.00012932.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para Mínima carga (0 personas):

Hallamos el valor de tiempo en el cual se alcanza el 30% de la aceleración positiva. 
Por tratarse de una función lineal el valor se halla trivialmente:

El 30% de la aceleración se alcanza en t_acel_30_percent = 0.6062180653.

Hallamos el valor de posición en el tiempo hallado anteriormente. 
Con este valor construimos la función (f{3}) a la cuál le hallaremos la raíz por Newton-Raphson:

    @(t)x{ii}(t)-x{ii}(t_acel_30_percent(ii))

Ejecutando el método de bisección para f{ 3 }, como arranque,  para la tolerancia 1.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 0.64954

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphsonpara f{3} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 0.6062180653 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99880274.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo

****************************
Calculando para v{4}:

Para el caso del freno del ascensor usamos Newton-Raphson para calcular el tiempo en el que se alcanza velocidad 0, la función utilizada es:

    @(t)3.0625*t.^2-7.84

Ejecutando el método de bisecciónpara v{4}, como arranque, para la tolerancia 3.0e-01...Listo

La semilla a usar para la búsqueda de la raíz es: 1.75000

Salvando las semillas en un archivo "CSV"......Listo

Ejecutando el método de Newton-Raphson para v{4} y para la tolerancia 1.0e-10...Listo

Raíz hallada después de 4 iteraciones: 1.6000000000 +- 1.0e-10

Salvando los resultados en un archivo "CSV"......Listo

Estimando el orden de convergencia......Listo

El orden de convergencia estimado para el método de Newton-Raphson es 1.99999853.

Salvando los resultados de la estimación del orden de convergencia en un archivo "CSV"......Listo



Ejecución del TP1 terminada.

